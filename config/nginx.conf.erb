daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}



http {
	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;

	server_tokens off;

proxy_cache_path /tmp/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;
	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout 5;

	upstream app_server {
		server 127.0.0.1:3000 fail_timeout=0;
	}

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;

    location /_next/static {
        proxy_cache STATIC;
        proxy_pass http://app_server;
        proxy_ignore_headers Cache-Control;
        proxy_cache_valid any 100d;

        # For testing cache - remove before deploying to production
        add_header X-Cache-Status $upstream_cache_status;
    }

    location /_next/image {
        proxy_cache STATIC;
        proxy_pass http://app_server;
        proxy_ignore_headers Cache-Control;
        proxy_cache_valid any 100d;

        # For testing cache - remove before deploying to production
        add_header X-Cache-Status $upstream_cache_status;
    }

		location / {
			if ($http_x_forwarded_proto != "https") {
			  return 301 https://$host$request_uri;
			}

			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_pass http://app_server;
		}
	}
}
